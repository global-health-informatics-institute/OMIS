 <script>
    const allProjects = [
      <% @metadata[:projects].each do |project| %>
        "<%= j project[:project_name] %>",
      <% end %>
    ];

    const grid = document.getElementById('grid');
    const cardCount = 12; // 4 cols Ã— 3 rows = 12 cards
    const activeCards = [];

    function getRandomUniqueProjects(count, exclude = []) {
      const available = allProjects.filter(p => !exclude.includes(p));
      const result = [];
      while (result.length < count && available.length) {
        const idx = Math.floor(Math.random() * available.length);
        result.push(available.splice(idx, 1)[0]);
      }
      return result;
    }

    function createCard(name) {
  const card = document.createElement('div');
  card.className = `
    project-card bg-green-600 text-white rounded-xl p-4
    flex items-center justify-center text-5xl font-bold text-center tracking-wide shadow-md
    transition-all fade-in
  `;
  card.textContent = name;
  return card;
}


    function initGrid() {
      const initialProjects = getRandomUniqueProjects(cardCount);
      initialProjects.forEach(name => {
        const card = createCard(name);
        grid.appendChild(card);
        activeCards.push({ el: card, name });
      });
    }

    function updateCardsRandomly() {
      const updatesCount = Math.floor(Math.random() * 3) + 3;
      const indices = [];

      while (indices.length < updatesCount) {
        const rand = Math.floor(Math.random() * activeCards.length);
        if (!indices.includes(rand)) {
          indices.push(rand);
        }
      }

      const currentNames = activeCards.map(c => c.name);
      const newNames = getRandomUniqueProjects(indices.length, currentNames);

      indices.forEach((i, idx) => {
        const newName = newNames[idx % newNames.length];
        const cardObj = activeCards[i];

        if (newName) {
          const delay = Math.random() * 1000;

          setTimeout(() => {
            const card = cardObj.el;
            card.classList.remove('fade-in');
            card.classList.add('fade-out');

            setTimeout(() => {
              card.textContent = newName;
              cardObj.name = newName;
              card.classList.remove('fade-out');
              card.classList.add('fade-in');
            }, 500);
          }, delay);
        }
      });
    }

    initGrid();
    setInterval(updateCardsRandomly, 6000);
  </script>

  <style>
    .project-card {
      transition: all 0.5s ease-in-out;
      will-change: transform, opacity;
    }

    .fade-out {
      opacity: 0;
      transform: scale(0.95);
    }

    .fade-in {
      opacity: 1;
      transform: scale(1);
    }

    /* Ensure cards stretch to fill the grid cells */
    #grid > div {
      width: 100%;
      height: 100%;
    }
  </style>
</div>
