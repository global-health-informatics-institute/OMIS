<h3>Step 1: Travel Details</h3>
<div class="mb-3">
  <%= form.label :destination, class: "form-label" %>
  <%= form.text_field :destination, class: "form-control" %>
</div>

<div class="mb-3">
  <%= form.label :vehicle, class: "form-label" %>
  <%= form.collection_select :asset_id, Asset.vehicles, :id, :description,
        { prompt: "Select a Vehicle" },
        {
          class: "form-select",
          data: { turbo_frame: "fuel_consumption_frame" },
          onchange: "Turbo.visit('/travel_requests/fuel_consumption?asset_id=' + this.value, { frame: 'fuel_consumption_frame' })".html_safe
        } %>

  <%= hidden_field_tag :vehicle_consumption, '', id: "vehicle_consumption" %>

  <turbo-frame id="fuel_consumption_frame"></turbo-frame>
</div>

<div class="mb-3">
  <%= form.label :distance, class: "form-label" %>
  <%= form.number_field :distance, step: :any, class: "form-control", id:"distance_field" %>
</div>

<div class="mb-3" data-controller="travel-request">
  <%= form.label :traveler_names, "Names of Travellers" %>

  <div style="max-height: 150px; overflow-y: auto;" data-travel-request-target="employeeCheckboxList">
    <% @employees.each do |employee| %>
      <div class="form-check">
        <%= check_box_tag 'employee_ids[]', employee.id, false,
            class: 'form-check-input',
            id: "employee_#{employee.id}",
            data: { action: "change->travel-request#updateTravelerNames" } %>
        <%= label_tag "employee_#{employee.id}", employee.person.full_name, class: "form-check-label" %>
      </div>
    <% end %>
  </div>

  <%= form.text_area :traveler_names, class: "form-control mt-2", rows: 3,
        placeholder: "Selected traveler names will appear here",
        data: { travel_request_target: "travelerNames" } %>
</div>
<%= hidden_field_tag :selected_traveler_count, 0, id: 'selected_traveler_count' %>


<div class="mb-3">
  <%= form.label :departure_date, class: "form-label" %>
  <%= form.datetime_local_field :departure_date, class: "form-control" %>
</div>

<div class="mb-3">
  <%= form.label :return_date, class: "form-label" %>
  <%= form.datetime_local_field :return_date, class: "form-control" %>
</div>


<div class="mb-3">
  <%= form.label :purpose, class: "form-label" %>
  <%= form.text_area :purpose, class: "form-control", rows: 3 %>
</div>

<div class="mb-3">
  <%= form.label :department, class: "form-label" %>
  <%= form.text_field :department, class: "form-control" %>
</div>

<%= hidden_field_tag 'requisition[project_id]', @selected_project&.id || params[:prj] %>

<div class="mb-3">
  <label for="requisition_project_id" class="form-label">Project</label>
  <%= select_tag 'requisition[project_id]',
        options_for_select(@project_options, @selected_project&.id),
        prompt: @selected_project&.full_name || 'Select Project',
        class: 'form-control',
        required: true %>
</div>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const departureField = document.getElementById('travel_request_departure_date');
    const returnField = document.getElementById('travel_request_return_date');
    const lunchField = document.getElementById('lunch_allowance_field');
    const dinnerField = document.getElementById('dinner_allowance_field');
    const accommodationField = document.getElementById('accommodation_field');

    function evaluateAllowance() {
      const departure = new Date(departureField.value);
      const returnDate = new Date(returnField.value);

      if (isNaN(departure.getTime()) || isNaN(returnDate.getTime())) return;

      const sameDay = departure.toDateString() === returnDate.toDateString();
      const departedBeforeNoon = departure.getHours() < 12;
      const returnedAfter130 = returnDate.getHours() > 13 || (returnDate.getHours() === 13 && returnDate.getMinutes() >= 30);

      if (sameDay && departedBeforeNoon && returnedAfter130) {
        lunchField.value = parseFloat(lunchField.dataset.default || 0).toFixed(2);
        dinnerField.value = 0;
        accommodationField.value = 0;
      } else {
        // Optionally reset to original values or leave as-is
      }
    }

    departureField.addEventListener('change', evaluateAllowance);
    returnField.addEventListener('change', evaluateAllowance);
  });
</script>
