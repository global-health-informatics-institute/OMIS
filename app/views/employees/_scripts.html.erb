
<script>
document.addEventListener("DOMContentLoaded", function () {
    const form = document.querySelector("form");

    if (form) {
        form.addEventListener("submit", function (event) {
            event.preventDefault();
            const tabs = document.querySelectorAll(".tab-content .tab-pane");
            let allValid = true;
            tabs.forEach(tab => tab.classList.remove("d-none"));
            const requiredFields = form.querySelectorAll(".required-field");
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    allValid = false;
                    field.classList.add("is-invalid");
                } else {
                    field.classList.remove("is-invalid");
                }
            });
            tabs.forEach(tab => {
                if (!tab.classList.contains("active")) {
                    tab.classList.add("d-none");
                }
            });
            if (allValid) {
                form.submit();
            } else {
                showFlashMessage("Please fill out all required fields.", "danger");
            }
        });
    }
});
 
// Disable clicks on nav tabs
document.addEventListener("DOMContentLoaded", function () {
    const navLinks = document.querySelectorAll(".nav-tabs .nav-link");
    navLinks.forEach(navLink => {
        navLink.addEventListener("click", function (event) {
            event.preventDefault(); 
        });
        navLink.style.pointerEvents = "none"; 
    });
});

// Validate all required in active tab
function validateFields(tabId) {
    var tab = document.getElementById(tabId);
    var requiredFields = tab.querySelectorAll(".required-field");
    var allFilled = true;

    requiredFields.forEach(function (field) {
        if (!field.value.trim()) {
            allFilled = false;
            field.classList.add("is-invalid");
        } else {
            field.classList.remove("is-invalid");
        }
    });

    if (allFilled) {
        return true;
    } else {
        showFlashMessage("Please fill out all required fields.", "danger");
        return false;
    }
}

// flash message
function showFlashMessage(message, type = "success") {
    let flashContainer = document.getElementById("flash-container");
    if (!flashContainer) {
        flashContainer = document.createElement("div");
        flashContainer.id = "flash-container";
        flashContainer.style.position = "fixed";
        flashContainer.style.top = "20px";
        flashContainer.style.right = "20px";
        flashContainer.style.zIndex = "1050";
        document.body.appendChild(flashContainer);
    }
    const flashMessage = document.createElement("div");
    flashMessage.className = `alert alert-${type} fade show`;
    flashMessage.role = "alert";
    flashMessage.innerHTML = `
        ${message}
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;

    flashContainer.appendChild(flashMessage);

    setTimeout(() => {
        flashMessage.classList.remove("show");
        flashMessage.classList.add("fade");
        setTimeout(() => flashMessage.remove(), 500);
    }, 3000);
}

// navigate between steps
function buttonNavigate(currentStep, direction) {
    const tabIds = [
        "nav-personal-demographics",
        "nav-employment-details",
        "nav-level-effort",
        "nav-supervision",
        "nav-summary"
    ];

    let targetStep = direction === "next" ? currentStep + 1 : currentStep - 1;

    if (direction === "next") {
        if (validateFields(tabIds[currentStep - 1])) {
            navigateWithButton(tabIds[targetStep - 1]);
        }
    } else {
        navigateWithButton(tabIds[targetStep - 1]);
    }
}

// navigate tabs with buttons
function navigateWithButton(targetTabId) {
    const navLinks = document.querySelectorAll(".nav-tabs .nav-link");
    
    navLinks.forEach((navLink) => {
        navLink.classList.remove("active");
        navLink.setAttribute("aria-selected", "false");
    });

    const targetNavLink = document.querySelector(`.nav-tabs .nav-link[data-bs-target="#${targetTabId}"]`);
    if (targetNavLink) {
        targetNavLink.classList.add("active");
        targetNavLink.setAttribute("aria-selected", "true");
    }

    document.querySelectorAll(".tab-content .tab-pane").forEach((tab) => {
        tab.classList.add("d-none");
        tab.classList.remove("show", "active");
    });

    const activeTab = document.getElementById(targetTabId);
    if (activeTab) {
        activeTab.classList.remove("d-none");
        activeTab.classList.add("show", "active");
    }

    // Update progress bar
    if (targetNavLink) {
        const navLinksArray = Array.from(navLinks);
        const newStepIndex = navLinksArray.indexOf(targetNavLink) + 1;
        updateProgress(newStepIndex);
    }
}

// update progress bar
function updateProgress(step) {
    let progressBar = document.getElementById("progress-bar");
    let progress = (step - 1) * 25;
    progressBar.style.width = progress + "%";
    progressBar.setAttribute("aria-valuenow", progress);
    progressBar.textContent = progress + "%";
}

// SUMMARY
function populatePersonalDemographics() {
  const firstName = document.querySelector("input[name='person[first_name]']")?.value || "--";
  const middleName = document.querySelector("input[name='person[middle_name]']")?.value || "--";
  const lastName = document.querySelector("input[name='person[last_name]']")?.value || "--";
  const birthDate = document.querySelector("input[name='person[birth_date]']")?.value || "--";
  const gender = document.querySelector("select[name='person[gender]']")?.value || "--";
  const maritalStatus = document.querySelector("select[name='person[marital_status]']")?.value || "--";
  const altPhone = document.querySelector("input[name='person[alt_phone]']")?.value || "--";
  const email = document.querySelector("input[name='person[email_address]']")?.value || "--";
  const postalAddress = document.querySelector("input[name='person[postal_address]']")?.value || "--";
  const officialEmail = document.querySelector("input[name='person[official_email]']")?.value || "--";
  const residentialAddress = document.querySelector("input[name='person[residential_address]']")?.value || "--";
  const landmark = document.querySelector("input[name='person[landmark]']")?.value || "--";

  document.getElementById("summary-first-name").textContent = firstName;
  document.getElementById("summary-middle-name").textContent = middleName;
  document.getElementById("summary-last-name").textContent = lastName;
  document.getElementById("summary-birth-date").textContent = birthDate;
  document.getElementById("summary-gender").textContent = gender;
  document.getElementById("summary-marital-status").textContent = maritalStatus;
  document.getElementById("summary-alt-phone").textContent = altPhone;
  document.getElementById("summary-email").textContent = email;
  document.getElementById("summary-postal-address").textContent = postalAddress;
  document.getElementById("summary-official-email").textContent = officialEmail;
  document.getElementById("summary-residential-address").textContent = residentialAddress;
  document.getElementById("summary-landmark").textContent = landmark;
}

function populateEmployeeDetails() {
    const employmentDate = document.querySelector("input[name='employee[employment_date]']")?.value || "--";
    const designatedRole = document.querySelector("select[name='employee[designated_role]']")?.value || "--";
    const designationStartDate = document.querySelector("input[name='employee[designation_start_date]']")?.value || "--"; 
    const branchSelect = document.querySelector("select[name='employee[branch]']");
    const branch = branchSelect ? branchSelect.options[branchSelect.selectedIndex].text : "--";
    const department = document.querySelector("select[name='employee[departments]']")?.value || "--";

    document.getElementById("summary-employment-date").textContent = employmentDate;
    document.getElementById("summary-designated-role").textContent = designatedRole;
    document.getElementById("summary-designated-start-date").textContent = designationStartDate;
    document.getElementById("summary-branch").textContent = branch;
    document.getElementById("summary-department").textContent = department;
}

function populateLevelOfEffort() {
  const projectSelects = document.querySelectorAll("select[name='projects[][project]']");
  const effortInputs = document.querySelectorAll("input[name='projects[][allocated_effort]']");

  let projectSummary = "";
  let effortSummary = "";

  projectSelects.forEach((select, index) => {
    const projectValue = select.value || "--";
    const effortValue = (effortInputs[index] && effortInputs[index].value) || "--";
    
    projectSummary += projectValue + ",";
    effortSummary += effortValue + ",";
  });

  document.getElementById("summary-project").textContent = projectSummary;
  document.getElementById("summary-allocated-effort").textContent = effortSummary;
}


function populateSupervision() {
    const supervisor = document.querySelector("select[name='supervision[supervisor]']")?.value || "--";
    const startedOn = document.querySelector("input[name='supervision[started_on]']")?.value || "--";

    document.getElementById("summary-supervisor").textContent = supervisor;
    document.getElementById("summary-started-on").textContent = startedOn;
}

populatePersonalDemographics();
populateEmployeeDetails();
populateLevelOfEffort();
populateSupervision();


const formElements = document.querySelectorAll("input[name^='person['], select[name^='person['], input[name^='employee['], select[name^='employee['], select[name^='supervision['], input[name^='supervision['], select[name^='projects['], input[name^='projects[']");
formElements.forEach(element => {
    element.addEventListener("change", () => {
        populatePersonalDemographics();
        populateEmployeeDetails();
        populateLevelOfEffort();
        populateSupervision();
    });
});

function flashMessage(message, type = "success") {
    let flashContainer = document.getElementById("flash-container");
    const flashMessage = document.createElement("div");
    flashMessage.className = `alert alert-${type} fade show`;
    flashMessage.role = "alert";
    flashMessage.innerHTML = `
        ${message}
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;
    flashContainer.appendChild(flashMessage);

    setTimeout(() => {
        flashMessage.classList.remove("show");
        flashMessage.classList.add("fade");
        setTimeout(() => flashMessage.remove(), 500);
    }, 3000);
}



document.addEventListener('DOMContentLoaded', function() {
  // Global state
  const state = {
    options: [],
    forms: [{ project: '', allocated_effort: 0 }],
    maxForms: 4
  };

  // Populate hidden options
  const projectSelectElem = document.getElementById("projectList");
  for (let option of projectSelectElem.options) {
    if (option.value) {
      state.options.push(option.value);
    }
  }

  // DOM elements
  const formRowsContainer = document.getElementById('form-rows');
  const totalEffortDisplay = document.getElementById('total-effort-display');
  const submitButton = document.getElementById('submit-button');
  const formElement = document.getElementById('dynamicForm');

  // Compute available project options 
  function availableOptions(index) {
    const selectedProjects = state.forms
      .filter((f, i) => i !== index)
      .map(f => f.project)
      .filter(val => val !== '');
    return state.options.filter(option => {
      return option === state.forms[index].project || !selectedProjects.includes(option);
    });
  }

  // Compute ae
  function computeTotalEffort() {
    return state.forms.reduce((sum, form) => sum + (Number(form.allocated_effort) || 0), 0);
  }

  // Update al + togglenext button
  function updateTotalAndSubmit() {
    const total = computeTotalEffort();
    totalEffortDisplay.textContent = 'Total Effort: ' + total + '%';
    submitButton.disabled = (total !== 100);

    if (total === 100) {
      totalEffortDisplay.classList.remove('btn-warning');
      totalEffortDisplay.classList.add('btn-success');
    } else {
      totalEffortDisplay.classList.remove('btn-success');
      totalEffortDisplay.classList.add('btn-warning');
    }
  }

  // Render all dynamic form rows
  function render() {
    // Clear previous rows
    formRowsContainer.innerHTML = '';

    state.forms.forEach((form, index) => {
      // Outer div for a form row
      const rowDiv = document.createElement('div');
      rowDiv.className = 'counter mb-3 p-3 border rounded';

      // Row container
      const rowContainer = document.createElement('div');
      rowContainer.className = 'row';

      /* Project select */
      const colProject = document.createElement('div');
      colProject.className = 'col-md-4';

      const labelProject = document.createElement('label');
      labelProject.htmlFor = 'project-' + index;
      labelProject.className = 'form-label';
      labelProject.textContent = 'Project';
      colProject.appendChild(labelProject);

      const selectProject = document.createElement('select');
      selectProject.id = 'project-' + index;
      selectProject.className = 'form-select required-field';
      selectProject.required = true;

      // Add the name attribute so Rails includes this field in params
      selectProject.name = 'projects[][project]';

      // Default option
      const defaultOption = document.createElement('option');
      defaultOption.value = '';
      defaultOption.textContent = 'Select project';
      selectProject.appendChild(defaultOption);

      // Add available options new row
      availableOptions(index).forEach(optionValue => {
        const optionElem = document.createElement('option');
        optionElem.value = optionValue;
        optionElem.textContent = optionValue;
        if (form.project === optionValue) {
          optionElem.selected = true;
        }
        selectProject.appendChild(optionElem);
      });


      selectProject.addEventListener('change', function(e) {
        state.forms[index].project = e.target.value;
        render();
      });

      colProject.appendChild(selectProject);
      rowContainer.appendChild(colProject);

      /* Allocated Effort */
      const colEffort = document.createElement('div');
      colEffort.className = 'col-md-4';

      const labelEffort = document.createElement('label');
      labelEffort.htmlFor = 'allocated_effort-' + index;
      labelEffort.className = 'form-label';
      labelEffort.textContent = 'Allocated Effort';
      colEffort.appendChild(labelEffort);

      const inputEffort = document.createElement('input');
      inputEffort.id = 'allocated_effort-' + index;
      inputEffort.type = 'number';
      inputEffort.step = '25';
      inputEffort.max = '100';
      inputEffort.min = '25';
      inputEffort.className = 'form-control required-field';
      inputEffort.required = true;
      inputEffort.name = 'projects[][allocated_effort]';

      inputEffort.value = form.allocated_effort || '';

      inputEffort.addEventListener('input', function(e) {
        state.forms[index].allocated_effort = Number(e.target.value) || 0;
        updateTotalAndSubmit();
      });
      colEffort.appendChild(inputEffort);
      rowContainer.appendChild(colEffort);

      /* Action buttons */
      const colButtons = document.createElement('div');
      colButtons.className = 'col-md-4 d-flex align-items-end';

      // Remove button
      const btnRemove = document.createElement('button');
      btnRemove.type = 'button';
      btnRemove.className = 'btn btn-danger me-2';
      btnRemove.textContent = '–';
      btnRemove.disabled = state.forms.length === 1;
      btnRemove.addEventListener('click', function() {
        removeForm(index);
      });
      colButtons.appendChild(btnRemove);

      // Add button
      const btnAdd = document.createElement('button');
      btnAdd.type = 'button';
      btnAdd.className = 'btn btn-success';
      btnAdd.textContent = '+';
      btnAdd.disabled = state.forms.length === state.maxForms;
      btnAdd.addEventListener('click', function() {
        addForm();
      });
      colButtons.appendChild(btnAdd);

      rowContainer.appendChild(colButtons);

      rowDiv.appendChild(rowContainer);
      formRowsContainer.appendChild(rowDiv);
    });

    updateTotalAndSubmit();
  }

  function addForm() {
    if (state.forms.length < state.maxForms) {
      state.forms.push({ project: '', allocated_effort: 0 });
      render();
    }
  }

  function removeForm(index) {
    if (state.forms.length > 1) {
      state.forms.splice(index, 1);
      render();
    }
  }

  // Initial render
  render();
});

</script>